## The following config file is intended for a test environment.
## To use Lasius productively, mongo db should be used in a replicaset with transactions.
## Following docker-compose setup comes with single mongo instance and therefore without support of transactions.

version: "3.9"

services:
  traefik:
    image: traefik:v3.4
    container_name: traefik
    command:
      - --log.level=DEBUG
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --providers.docker=true
      # - --api=true
      # - --api.dashboard=true
      - --providers.docker.exposedByDefault=false
      # LetsEncrypt Staging Server - uncomment when testing. LE has a rate limit of 5 certificates per domain per week.
      # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      # - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      # - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http
      # - --certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_CERT_EMAIL:-ssladmin@lasius.ch}
      # - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    labels:
      - traefik.enable=true
      - traefik.http.routers.to-https.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.to-https.entrypoints=http
      - traefik.http.routers.to-https.middlewares=to-https
      - traefik.http.routers.traefik.rule=Host(`traefik.${LASIUS_HOSTNAME:-localhost}`)
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=${TRAEFIK_CERT_RESOLVER:-letsencrypt}
      - traefik.http.middlewares.to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER:-admin}:${TRAEFIK_PASSWORD_HASH:-'$2y$10$zi5n43jq9S63gBqSJwHTH.nCai2vB0SW/ABPGg2jSGmJBVRo0A.ni'}
    restart: always
    ports:
      - "${LASIUS_PORT_HTTP:-80}:80"
      - "${LASIUS_PORT_HTTPS:-443}:443"
    volumes:
      - ./data/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  frontend:
    image: tegonal/lasius-frontend:${LASIUS_VERSION:-latest}
    container_name: frontend
    env_file:
      - .env
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${LASIUS_HOSTNAME:-localhost}`) && !PathPrefix(`/backend`) && !PathPrefix(`/keycloak`)
      - traefik.http.routers.frontend.entrypoints=https
      - traefik.http.routers.frontend.tls=true
      - traefik.http.routers.frontend.tls.certresolver=${TRAEFIK_CERT_RESOLVER:-letsencrypt}
      - traefik.http.services.frontend.loadbalancer.server.port=3000
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- 'http://frontend:3000/api/health' || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s
    depends_on:
      backend:
        condition: service_healthy
    environment:
      ENVIRONMENT: production
      LASIUS_API_URL: https://${LASIUS_HOSTNAME:-localhost}:${LASIUS_PORT_HTTPS:-443}/backend
      LASIUS_API_URL_INTERNAL: http://backend:9000/backend
      LASIUS_API_WEBSOCKET_URL: wss://${LASIUS_HOSTNAME:-localhost}:${LASIUS_PORT_HTTPS:-443}/backend
      LASIUS_DEMO_MODE: ${LASIUS_DEMO_MODE:-false}
      LASIUS_TELEMETRY_MATOMO_HOST: ${LASIUS_TELEMETRY_MATOMO_HOST}
      LASIUS_TELEMETRY_MATOMO_ID: ${LASIUS_TELEMETRY_MATOMO_ID}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-zSaXWo4L7rS9uWETmvT6oL/0tE6X4Lt7ZCJRkNBUMnQ=}
      NEXTAUTH_URL: https://${LASIUS_HOSTNAME:-localhost}:${LASIUS_PORT_HTTPS:-443}
      NEXTAUTH_URL_INTERNAL: http://frontend:3000
      LASIUS_TERMSOFSERVICE_VERSION: ${LASIUS_TERMSOFSERVICE_VERSION}
      TZ: ${TZ:-CET}
      # Disable if you want to reduce log output
      LASIUS_DEBUG: 'false'
    volumes:
      - ./termsofservice:/app/public/termsofservice

  backend:
    image: tegonal/lasius-backend:${LASIUS_VERSION:-latest}
    container_name: backend
    env_file:
      - .env
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`${LASIUS_HOSTNAME:-localhost}`) && PathPrefix(`/backend`) && !PathPrefix(`/backend/docs`)
      - traefik.http.routers.backend.entrypoints=https
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.tls.certresolver=${TRAEFIK_CERT_RESOLVER:-letsencrypt}
      - traefik.http.services.backend.loadbalancer.server.port=9000
    restart: always
    healthcheck:
      test: curl --fail http://backend:9000/backend/config || exit 1
      interval: 10s
      retries: 5
      start_period: 15s
      timeout: 10s
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      ARTIFACT_PATH: artifact.zip
      LASIUS_CLEAN_DATABASE_ON_STARTUP: 'false'
      LASIUS_INSTANCE: ${LASIUS_INSTANCE:-Dev}
      LASIUS_SUPPORTS_TRANSACTIONS: 'false' # <== Enable transactions only if you connect to a mongodb replicaset
      LASIUS_TITLE: ${LASIUS_HOSTNAME:-lasius}
      MONGODB_URI: mongodb://${MONGO_INITDB_USERNAME:-lasius}:${MONGO_INITDB_PASSWORD:-lasius}@${MONGO_HOST:-mongodb:27017}/lasius
      START_PARAMS: -Dlogger.resource=logback-prod.xml -Dconfig.file=/app/backend.conf -Dpidfile.path=/var/run/lasius.pid -DALLOWED_HOSTS.0=${LASIUS_HOSTNAME:-localhost} -DALLOWED_HOSTS.2=backend:9000
      TZ: ${TZ:-CET}
    volumes:
      - ${PWD}/backend.conf:/app/backend.conf

  mongodb:
    build:
      context: mongodb
      dockerfile: Dockerfile
    container_name: mongodb
    labels:
      - traefik.enable=false
    restart: always
    healthcheck:
      test: |
        mongosh -u "$${MONGO_INITDB_ROOT_USERNAME:-admin}" -p "$${MONGO_INITDB_ROOT_PASSWORD:-admin}" --port 27017 --quiet --eval "rs.status().ok" ||
         mongosh -u "$${MONGO_INITDB_ROOT_USERNAME:-admin}" -p "$${MONGO_INITDB_ROOT_PASSWORD:-admin}" --port 27017 --quiet --eval "rs.initiate({_id: \"lasius\",members: [{ _id : 0, host : \"mongodb:27017\" }]}).ok"
      interval: 10s
      retries: 5
      start_period: 15s
      timeout: 10s
    environment:
      MONGO_INITDB_DATABASE: lasius
      MONGO_INITDB_PASSWORD: ${MONGO_INITDB_PASSWORD:-lasius}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-admin}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_USERNAME: ${MONGO_INITDB_USERNAME:-lasius}
      TZ: ${TZ:-CET}
    volumes:
      - db:/data/db
      - ./mongodb/init/mongodb-init.sh:/docker-entrypoint-initdb.d/mongodb-init.sh:ro
    command: --replSet lasius --bind_ip_all --keyFile /secrets/mongodb.key --auth  --port 27017

  keycloak:
    build:
      context: keycloak
      dockerfile: ./Dockerfile
    env_file:
      - .env
    container_name: keycloak
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak.rule=Host(`${LASIUS_HOSTNAME:-localhost}`) && PathPrefix(`/keycloak`)
      - traefik.http.routers.keycloak.entrypoints=https
      - traefik.http.routers.keycloak.tls=true
      - traefik.http.routers.keycloak.tls.certresolver=${TRAEFIK_CERT_RESOLVER:-letsencrypt}
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./keycloak/lasius-theme:/opt/keycloak/themes/lasius-theme
    environment:
      KC_DB_URL: jdbc:postgresql://postgres/${POSTGRES_DB_NAME}
      KC_DB_USERNAME: ${POSTGRES_DB_USERNAME}
      KC_DB_PASSWORD: ${POSTGRES_DB_PASSWORD}
      KC_HOSTNAME: https://${LASIUS_HOSTNAME:-localhost}/keycloak
      KC_HOSTNAME_PORT: ${LASIUS_PORT_HTTPS:-443}
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: true
      KC_HOSTNAME_DEBUG: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PWD}
      KC_FRONTEND_URL: https://${LASIUS_HOSTNAME:-localhost}${LASIUS_PORT_HTTPS:+$LASIUS_PORT_HTTPS}/keycloak
      KC_HTTP_ENABLED: true
      KC_LOG_LEVEL: info
      LASIUS_URL: https://${LASIUS_HOSTNAME:-localhost}${LASIUS_PORT_HTTPS:+$LASIUS_PORT_HTTPS}

  postgres:
    image: pgautoupgrade/pgautoupgrade:17-bookworm
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_DB_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  db:
    driver: local
